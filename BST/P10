Construct the mirror tree of a given BST.



*******************************************************************************************************************************





#include<stdio.h>
#include<stdlib.h>

struct Node{
        int data;
        struct Node* left;
        struct Node* right;
};

struct Node* newNode(int data)
{
        struct Node* node = (struct Node*)malloc(sizeof(struct Node));
        node->data = data;
        node->right = node->left = NULL;
        return node;
}

struct Node* insert(struct Node* root,int data)
{
        if(root==NULL)return newNode(data);
        if(data<root->data){
                root->left = insert(root->left,data);
        }
        else if(data>root->data){
                root->right = insert(root->right,data);
        }
        return root;
}

void mirror(struct Node* root)
{
        if(root==NULL)
                return;

        struct Node * node = root->left;
        root->left = root->right;
        root->right = node;
        mirror(root->left);
        mirror(root->right);
}


void printIn(struct Node* root)
{
        if(root==NULL)return;
        printIn(root->left);
        printf("%d ",root->data);
        printIn(root->right);
}

int main()
{
        int n;
        scanf("%d",&n);
        struct Node* root = NULL;
        int val;
        for(int i =0;i<n;i++){
                scanf("%d",&val);
                root = insert(root,val);
        }
        printIn(root);
        mirror(root);
        printf("\n");
        printIn(root);

        printf("\n");
        return 0;
}
