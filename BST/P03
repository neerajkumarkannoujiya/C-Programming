Read 2n ints. Use each half to create two BSTs in the given order. Find if the two trees are identical.
Print y/n. There are T test cases.
Input: (T, n, x_i)
3
3
1 2 3 1 3 2
1 2 3 2 3 1
2 1 3 2 3 1
Output:
n
n
y





******************************************************************************************************************************************************







#include<stdio.h>
#include<stdlib.h>

struct Node{
        int data;
        struct Node* left;
        struct Node* right;
};

struct Node* newNode(int data)
{
        struct Node* node = (struct Node*)malloc(sizeof(struct Node));
        node->data = data;
        node->left = node->right=NULL;
        return node;
}

struct Node* insert(struct Node* root,int data)
{
        if(root==NULL)return newNode(data);
        if(data<root->data){
                root->left = insert(root->left,data);
        }
        if(data > root->data){
                root->right = insert(root->right,data);
        }
        return root;
}

int isIdentical(struct Node* root1, struct Node* root2)
{
        if(root1==NULL && root2==NULL)return 1;
        if(root1==NULL || root2==NULL)return 0;
        return root1->data == root2->data && isIdentical(root1->left, root2->left)
                        && isIdentical(root1->right, root2->right);
}

void freeTree(struct Node* root) {
    if (root == NULL) return;
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

int main()
{
        int T;
        scanf("%d",&T);
        int n;
        scanf("%d",&n);
        while(T--)
        {
                struct Node* root1 = NULL;
                struct Node* root2 = NULL;
                for(int i=0;i<n;i++){
                        int val;
                        scanf("%d",&val);
                        root1 = insert(root1,val);
                }
                for(int i=0;i<n;i++){
                        int val;
                        scanf("%d",&val);
                        root2 = insert(root2,val);
                }
                if(isIdentical(root1,root2)){
                        printf("y\n");
                }
                else{
                        printf("n\n");
                }
                freeTree(root1);
                freeTree(root2);
        }
        return 0;
}                                                                                                                     
