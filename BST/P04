Given a BST, print out all root-to-leaf paths.



***********************************************************************************************************







#include<stdio.h>
#include<stdlib.h>

struct Node{
        int data;
        struct Node* left;
        struct Node* right;
};

struct Node* newNode(int data)
{
        struct Node* node = (struct Node*)malloc(sizeof(struct Node));
        node->data = data;
        node->right = node->left = NULL;
        return node;
}

struct Node* insert(struct Node* root,int data)
{
        if(root==NULL)return newNode(data);
        if(data<root->data){
                root->left = insert(root->left,data);
        }
        else if(data>root->data){
                root->right = insert(root->right,data);
        }
        return root;
}

void printArray(int arr[],int n)
{
        for(int i=0;i<n;i++){
                printf("%d ",arr[i]);
        }
        printf("\n");
}

void printPath(struct Node* root, int path[], int len)
{
        if(root==NULL)return;
        path[len++] = root->data;
        if(root->left==NULL && root->right ==NULL){
                printArray(path,len);
        }
        else{
                printPath(root->left,path,len);
                printPath(root->right,path,len);
        }
}

void printRootToLeaf(struct Node* root)
{
        int path[1000];
        printPath(root,path,0);
}

int main()
{
        int n;
        scanf("%d",&n);
        struct Node* root = NULL;
        int val;
        for(int i =0;i<n;i++){
                scanf("%d",&val);
                root = insert(root,val);
        }
        printRootToLeaf(root);
        return 0;
}
